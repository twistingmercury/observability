# An example docker-compose.yaml file for running an app, otel-collector, and vector in docker-compose

version: "3"

networks:
  telemetry:
    driver: bridge

services:
  your-app:
    container_name: your-app-ctnr
    image: your/image:latest
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      TRACE_ENDPOINT: otel-collector-ctnr:4317 # OTLP gRPC receiver
      METRICS_ENDPOINT: otel-collector-ctnr:4327 # OTLP gRPC receiver
#      LOGS_ENDPOINT: http://vector-ctnr:4319 # Vector HTTP receiver (if needed)
      GIN_MODE: release # Assumes Gin Web Framework is being used
    networks:
      - telemetry
    depends_on:
      - otel-collector

  otel-collector:
    container_name: otel-collector-ctnr
    image: otel/opentelemetry-collector-contrib:latest
    restart: always
    command: [ "--observeCfg=/etc/otel-collector-observeCfg.yaml"]
    volumes:
      - ${PWD}/example-otel-collector-observeCfg.yaml:/etc/otel-collector-observeCfg.yaml
    environment:
        DD_API_KEY: ${DD_API_KEY}
    ports:
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver (traces)
      - "4327:4327"   # OTLP/2 gRPC receiver (metrics
    networks:
       - telemetry
    healthcheck:
      test: ["CMD-SHELL", " netstat -an | grep -q 13133"]

  vector:
    container_name: vector-ctnr
    image: timberio/vector:latest-alpine
    restart: unless-stopped
    volumes:
      - ${PWD}/example-vector.toml:/etc/vector/example-vector.toml:ro
      - /var/run/docker.sock:/var/run/docker.sock # Mount the docker socket so that vector can collect container metrics
    environment:
      DOCKER_HOST: "unix:///var/run/docker.sock" # Set the docker host to the unix socket
      DD_API_KEY: ${DD_API_KEY}
    ports:
      - "8686:8686" # Vector api
      - "4319:4319" # Vector HTTP receiver
    networks:
      - telemetry
    depends_on:
      - test-app